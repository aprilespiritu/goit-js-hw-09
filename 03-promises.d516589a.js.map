{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAO,CACXC,KAAMC,SAASC,cAAc,aAC7BC,MAAOF,SAASC,cAAc,uBAC9BE,KAAMH,SAASC,cAAc,sBAC7BG,OAAQJ,SAASC,cAAc,0BAG3BF,KAAEM,EAAIH,MAAEI,EAAKH,KAAEI,EAAIH,OAAEI,GAAWV,EA2BtC,SAASW,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,EACFF,EAAQ,C,SAAEH,EAAUR,MAAAS,IAEpBG,EAAO,C,SAAEJ,EAAUR,MAAAS,GAAQ,GAE5BA,EAAM,G,CAlCbN,EAAKc,iBAAiB,UAEtB,SAA0BC,GAGxB,GAFAA,EAAMC,iBAEFf,EAAMgB,MAAQ,GAAKf,EAAKe,MAAQ,GAAKd,EAAOc,MAAQ,EAGtD,OAFA1B,EAAA2B,OAAOC,QAAQ,sCACfnB,EAAKoB,QAIP,IAAIC,EAAaC,OAAOrB,EAAMgB,OAE9B,IAAK,IAAIM,EAAgB,EAAGA,GAAiBpB,EAAOc,MAAOM,IACzDnB,EAAcmB,EAAeF,GAC1BG,MAAK,EAACnB,SAAEA,EAAUR,MAAA4B,MACjBlC,EAAA2B,OAAOQ,QAAQ,qBAAqBrB,QAAeoB,MAAU,IAE9DE,OAAM,EAACtB,SAAEA,EAAUR,MAAA+B,MAClBrC,EAAA2B,OAAOC,QAAQ,oBAAoBd,QAAeuB,MAAU,IAE9DP,GAAcC,OAAOpB,EAAKe,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst refs = {\n  form: document.querySelector('form.form'),\n  delay: document.querySelector(\"input[name='delay']\"),\n  step: document.querySelector(\"input[name='step']\"),\n  amount: document.querySelector(\"input[name='amount']\"),\n};\n\nconst { form, delay, step, amount } = refs;\n\nform.addEventListener('submit', promiseGenerator)\n\nfunction promiseGenerator(event) {\n  event.preventDefault();\n\n  if (delay.value < 1 || step.value < 1 || amount.value < 1) {\n    Notify.failure('Please input a positive value');\n    form.reset();\n    return;\n  }\n\n  let delayValue = Number(delay.value);\n\n  for (let positionValue = 1; positionValue <= amount.value; positionValue++) {\n    createPromise(positionValue, delayValue)\n      .then(({ position, delay }) => {\n        Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n      }); \n      delayValue += Number(step.value);\n  }\n}\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  }) \n}\n"],"names":["$iQIUW","parcelRequire","$47d4ff9957288465$var$refs","form","document","querySelector","delay","step","amount","$47d4ff9957288465$var$form","$47d4ff9957288465$var$delay","$47d4ff9957288465$var$step","$47d4ff9957288465$var$amount","$47d4ff9957288465$var$createPromise","position","delay3","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","event","preventDefault","value","Notify","failure","reset","delayValue","Number","positionValue","then","delay1","success","catch","delay2"],"version":3,"file":"03-promises.d516589a.js.map"}